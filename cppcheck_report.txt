Day18/ShapeBuild/Shape.hpp:10:14: style:inconclusive: Technically the member function 'Shape::operator>' can be const. [functionConst]
        bool operator >(Shape s);
             ^
Day18/ShapeBuild/ShapeComp.cpp:3:13: note: Technically the member function 'Shape::operator>' can be const.
bool Shape::operator >(Shape s){
            ^
Day18/ShapeBuild/Shape.hpp:10:14: note: Technically the member function 'Shape::operator>' can be const.
        bool operator >(Shape s);
             ^
Day18/ShapeBuild/Shape.hpp:11:14: style:inconclusive: Technically the member function 'Shape::operator<' can be const. [functionConst]
        bool operator <(Shape s);
             ^
Day18/ShapeBuild/ShapeComp.cpp:7:13: note: Technically the member function 'Shape::operator<' can be const.
bool Shape::operator <(Shape s){
            ^
Day18/ShapeBuild/Shape.hpp:11:14: note: Technically the member function 'Shape::operator<' can be const.
        bool operator <(Shape s);
             ^
Day18/ShapeBuild/Shape.hpp:12:14: style:inconclusive: Technically the member function 'Shape::operator==' can be const. [functionConst]
        bool operator ==(Shape s);
             ^
Day18/ShapeBuild/ShapeComp.cpp:11:13: note: Technically the member function 'Shape::operator==' can be const.
bool Shape::operator ==(Shape s){
            ^
Day18/ShapeBuild/Shape.hpp:12:14: note: Technically the member function 'Shape::operator==' can be const.
        bool operator ==(Shape s);
             ^
Day18/ShapeBuild/Shape.hpp:20:9: style: Class 'Circle' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Circle(int radius){
        ^
Day18/ShapeBuild/Shape.hpp:38:9: style: Class 'Square' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Square(int side){
        ^
Day18/ShapeBuild/Shape.hpp:46:9: style: Class 'Triangle' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Triangle(int side) {
        ^
Day18/SudokuBuild/NorvigSudoku.hpp:26:14: style:inconclusive: Technically the member function 'Square::printPossibleValues' can be const. [functionConst]
        void printPossibleValues();
             ^
Day18/SudokuBuild/NorvigSudoku.cpp:273:14: note: Technically the member function 'Square::printPossibleValues' can be const.
void Square::printPossibleValues(){
             ^
Day18/SudokuBuild/NorvigSudoku.hpp:26:14: note: Technically the member function 'Square::printPossibleValues' can be const.
        void printPossibleValues();
             ^
Day18/SudokuBuild/NorvigSudoku.hpp:32:13: style:inconclusive: Technically the member function 'Square::getCommitValue' can be const. [functionConst]
        int getCommitValue(){
            ^
Day18/SudokuBuild/NorvigSudoku.hpp:35:13: style:inconclusive: Technically the member function 'Square::getNumberOfPossibles' can be const. [functionConst]
        int getNumberOfPossibles(){
            ^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 112 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c:570:0: information: Skipping configuration 'SDCC;__SDCC_VERSION_MAJOR' since the value of '__SDCC_VERSION_MAJOR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c:570:0: information: Skipping configuration 'SDCC;__SDCC_VERSION_MAJOR;__SDCC_VERSION_MAJOR' since the value of '__SDCC_VERSION_MAJOR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 110 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp:555:0: information: Skipping configuration '_MSC_BUILD;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp:557:0: information: Skipping configuration '_MSC_BUILD;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  '.', COMPILER_VERSION_MINOR,
^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp:559:0: information: Skipping configuration '_MSC_FULL_VER;_MSC_VER' since the value of '_MSC_FULL_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   '.', COMPILER_VERSION_PATCH,
^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp:555:0: information: Skipping configuration '_MSC_FULL_VER;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  COMPILER_VERSION_MAJOR,
^
Day18/SudokuBuild/build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp:557:0: information: Skipping configuration '_MSC_FULL_VER;_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  '.', COMPILER_VERSION_MINOR,
^
MiniProject/FinalSudoku/include/NorvigSudoku.hpp:29:13: style:inconclusive: Technically the member function 'Square::getNumberOfPossibles' can be const. [functionConst]
        int getNumberOfPossibles(){
            ^
MiniProject/FinalSudoku/include/NorvigSudoku.hpp:23:14: style:inconclusive: Technically the member function 'Square::printPossibleValues' can be const. [functionConst]
        void printPossibleValues();
             ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:387:14: note: Technically the member function 'Square::printPossibleValues' can be const.
void Square::printPossibleValues(){
             ^
MiniProject/FinalSudoku/include/NorvigSudoku.hpp:23:14: note: Technically the member function 'Square::printPossibleValues' can be const.
        void printPossibleValues();
             ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:257:31: style: Condition '!leastFound' is always true [knownConditionTrueFalse]
 for (int row = 0; row < 9 && !leastFound; row++)
                              ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:256:23: note: Assignment 'leastFound=false', assigned value is 0
    bool leastFound = false;
                      ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:257:31: note: Condition '!leastFound' is always true
 for (int row = 0; row < 9 && !leastFound; row++)
                              ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:258:32: style: Condition '!leastFound' is always true [knownConditionTrueFalse]
  for (int col = 0; col < 9 && !leastFound; col++)
                               ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:256:23: note: Assignment 'leastFound=false', assigned value is 0
    bool leastFound = false;
                      ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:258:32: note: Condition '!leastFound' is always true
  for (int col = 0; col < 9 && !leastFound; col++)
                               ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:143:19: style: The scope of the variable 'square' can be reduced. [variableScope]
            auto &square = grid[box_start_row + row ][box_start_col+col];
                  ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:171:15: style: The scope of the variable 'square' can be reduced. [variableScope]
        auto &square = grid[row][baseCol];
              ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:198:15: style: The scope of the variable 'square' can be reduced. [variableScope]
        auto &square = grid[baseRow][col];
              ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:369:30: performance: Function parameter 's' should be passed by const reference. [passedByValue]
void solveSudoku(std::string s){
                             ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:48:39: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                if(value == peerValue){
                                      ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:72:39: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                if(value == peerValue){
                                      ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:100:43: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                    if(value == peerValue){
                                          ^
MiniProject/FinalSudoku/src/NorvigSudoku.cpp:264:28: style: Variable 'leastFound' is assigned a value that is never used. [unreadVariable]
                leastFound = true;
                           ^
MiniProject/Old/NorvigSudoku.cpp:23:14: style:inconclusive: Technically the member function 'Square::printPossibleValues' can be const. [functionConst]
        void printPossibleValues(){
             ^
MiniProject/Old/NorvigSudoku.cpp:44:13: style:inconclusive: Technically the member function 'Square::getCommitValue' can be const. [functionConst]
        int getCommitValue(){
            ^
MiniProject/Old/NorvigSudoku.cpp:47:13: style:inconclusive: Technically the member function 'Square::getNumberOfPossibles' can be const. [functionConst]
        int getNumberOfPossibles(){
            ^
WeekOne/DayFive/ShapeComp.cpp:15:9: style: Class 'Circle' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Circle(int radius){
        ^
WeekOne/DayFive/ShapeComp.cpp:33:9: style: Class 'Square' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Square(int side){
        ^
WeekOne/DayFive/ShapeComp.cpp:41:9: style: Class 'Triangle' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Triangle(int side) {
        ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:46:5: warning: Member variable 'record::payMeth' is not initialized in the constructor. [uninitMemberVar]
    record(int _recordId):recordId(_recordId){}
    ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:22:10: style:inconclusive: Technically the member function 'part::printPartnumber' can be const. [functionConst]
    void printPartnumber(){
         ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:32:11: style:inconclusive: Technically the member function 'service::printServiceType' can be const. [functionConst]
    void  printServiceType(){
          ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:73:10: style:inconclusive: Technically the member function 'record::getPaymentMethod' can be const. [functionConst]
    void getPaymentMethod(){
         ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:21:5: style: Class 'part' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    part(int _partNumber):partNumber(_partNumber){}
    ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:31:5: style: Class 'service' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    service(std::string _serviceType): serviceType(_serviceType){}
    ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:46:5: style: Class 'record' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    record(int _recordId):recordId(_recordId){}
    ^
WeekOne/DayFour/Assignment/ServiceAdmin.cpp:31:25: performance: Function parameter '_serviceType' should be passed by const reference. [passedByValue]
    service(std::string _serviceType): serviceType(_serviceType){}
                        ^
WeekOne/DayOne/BonusAssignment/NumberGuess.cpp:7:9: style: The scope of the variable 'incVar' can be reduced. [variableScope]
    int incVar, number = 64, NbrOfQuestion = 1;
        ^
WeekOne/DayTwo/AssignmentOne/RandNumber.cpp:15:14: error: Uninitialized variable: m [uninitvar]
    int arr2[m];
             ^
WeekOne/DayTwo/AssignmentOne/RandNumber.cpp:26:25: error: Uninitialized variable: m [uninitvar]
    for (int i = 0; i < m; i++){
                        ^
WeekOne/DayTwo/AssignmentOne/RandNumber.cpp:11:12: style: Variable 'm' is not assigned a value. [unassignedVariable]
    int n, m;
           ^
WeekOne/DayTwo/AssignmentOne/RandNumber2.cpp:7:18: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
    size_t m=8, n=9, k=11;
                 ^
WeekOne/DayTwo/AssignmentOne/RandNumber2.cpp:7:23: style: Variable 'k' is assigned a value that is never used. [unreadVariable]
    size_t m=8, n=9, k=11;
                      ^
WeekOne/DayTwo/AssignmentOne/RandNumber2.cpp:10:27: style: Variable 'Array' is assigned a value that is never used. [unreadVariable]
    unsigned int ***Array = new unsigned int **[m];
                          ^
WeekOne/DayTwo/LearningEnums.cpp:9:16: style: Condition 'payMeth==PaymentMethod::Cash' is always true [knownConditionTrueFalse]
    if(payMeth == PaymentMethod::Cash){
               ^
WeekOne/DayTwo/LearningEnums.cpp:5:42: note: Assignment 'payMeth=PaymentMethod::Cash', assigned value is 2
    PaymentMethod payMeth = PaymentMethod::Cash;
                                         ^
WeekOne/DayTwo/LearningEnums.cpp:9:16: note: Condition 'payMeth==PaymentMethod::Cash' is always true
    if(payMeth == PaymentMethod::Cash){
               ^
WeekOne/DayTwo/LearningPointers.cpp:7:5: error: Memory leak: b [memleak]
    b = &a;
    ^
WeekThree/RandomDuplicate.cpp:15:9: style: The scope of the variable 'randNumber' can be reduced. [variableScope]
    int randNumber;
        ^
WeekThree/ShapeCompareTemplate.cpp:9:14: style:inconclusive: Technically the member function 'Shape::operator>' can be const. [functionConst]
        bool operator >(Shape s){
             ^
WeekThree/ShapeCompareTemplate.cpp:13:14: style:inconclusive: Technically the member function 'Shape::operator<' can be const. [functionConst]
        bool operator <(Shape s){
             ^
WeekThree/ShapeCompareTemplate.cpp:17:14: style:inconclusive: Technically the member function 'Shape::operator==' can be const. [functionConst]
        bool operator ==(Shape s){
             ^
WeekThree/ShapeCompareTemplate.cpp:27:9: style: Class 'Circle' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Circle(int radius){
        ^
WeekThree/ShapeCompareTemplate.cpp:45:9: style: Class 'Square' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Square(int side){
        ^
WeekThree/ShapeCompareTemplate.cpp:53:9: style: Class 'Triangle' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Triangle(int side) {
        ^
WeekThree/Thursday/Assignment2.cpp:14:14: style:inconclusive: Same expression used in consecutive assignments of 'front' and 'rear'. [duplicateAssignExpression]
    uint16_t front = 1*150;
             ^
WeekThree/Thursday/Assignment2.cpp:15:14: note: Same expression used in consecutive assignments of 'front' and 'rear'.
    uint16_t rear = 1*150;
             ^
WeekThree/Thursday/Assignment2.cpp:14:14: note: Same expression used in consecutive assignments of 'front' and 'rear'.
    uint16_t front = 1*150;
             ^
WeekThree/Thursday/Assignment2.cpp:15:14: style:inconclusive: Same expression used in consecutive assignments of 'rear' and 'right'. [duplicateAssignExpression]
    uint16_t rear = 1*150;
             ^
WeekThree/Thursday/Assignment2.cpp:16:14: note: Same expression used in consecutive assignments of 'rear' and 'right'.
    uint16_t right = 1*150;
             ^
WeekThree/Thursday/Assignment2.cpp:15:14: note: Same expression used in consecutive assignments of 'rear' and 'right'.
    uint16_t rear = 1*150;
             ^
WeekThree/WordsQuantity.cpp:11:9: style: The scope of the variable 'quantity' can be reduced. [variableScope]
    int quantity;
        ^
Day18/ShapeBuild/Shape.hpp:36:1: error: The one definition rule is violated, different classes/structs have the same name 'Square' [ctuOneDefinitionRuleViolation]
class Square: public Shape{
^
Day18/SudokuBuild/NorvigSudoku.hpp:15:1: note: The one definition rule is violated, different classes/structs have the same name 'Square'
class Square{
^
Day18/ShapeBuild/Shape.hpp:36:1: note: The one definition rule is violated, different classes/structs have the same name 'Square'
class Square: public Shape{
^
Day18/ShapeBuild/Shape.hpp:36:1: error: The one definition rule is violated, different classes/structs have the same name 'Square' [ctuOneDefinitionRuleViolation]
class Square: public Shape{
^
MiniProject/FinalSudoku/include/NorvigSudoku.hpp:12:1: note: The one definition rule is violated, different classes/structs have the same name 'Square'
class Square{
^
Day18/ShapeBuild/Shape.hpp:36:1: note: The one definition rule is violated, different classes/structs have the same name 'Square'
class Square: public Shape{
^
Day18/ShapeBuild/Shape.hpp:36:1: error: The one definition rule is violated, different classes/structs have the same name 'Square' [ctuOneDefinitionRuleViolation]
class Square: public Shape{
^
MiniProject/Old/NorvigSudoku.cpp:12:1: note: The one definition rule is violated, different classes/structs have the same name 'Square'
class Square{
^
Day18/ShapeBuild/Shape.hpp:36:1: note: The one definition rule is violated, different classes/structs have the same name 'Square'
class Square: public Shape{
^
Day18/ShapeBuild/Shape.hpp:15:1: error: The one definition rule is violated, different classes/structs have the same name 'Circle' [ctuOneDefinitionRuleViolation]
class Circle: public Shape{
^
WeekOne/DayFive/ShapeComp.cpp:10:1: note: The one definition rule is violated, different classes/structs have the same name 'Circle'
class Circle: public Shape{
^
Day18/ShapeBuild/Shape.hpp:15:1: note: The one definition rule is violated, different classes/structs have the same name 'Circle'
class Circle: public Shape{
^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

